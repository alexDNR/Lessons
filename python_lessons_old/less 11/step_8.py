'''
    Сортировка пузырьком
Алгоритм сортировки пузырьком состоит из повторяющихся проходов по сортируемому списку. 
За каждый проход элементы последовательно сравниваются попарно и, если порядок в паре неверный,
выполняется обмен элементов. Проходы по списку повторяются n-1 раз, где n – длина списка. 
При каждом проходе алгоритма по внутреннему циклу, очередной наибольший элемент списка ставится на свое 
место в конце списка рядом с предыдущим «наибольшим элементом».
Наибольший элемент каждый раз «всплывает» до нужной позиции, 
как пузырёк в воде — отсюда и название алгоритма
'''

'''
Реализация алгоритма сортировка пузырьком
Пусть требуется отсортировать по возрастанию список чисел: 
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99].
'''
# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# n = len(a)
# for i in range(n - 1):
#     for j in range(n - i - 1):
#         if a[j] > a[j + 1]:                  # если порядок элементов пары неправильный
#             a[j], a[j + 1] = a[j + 1], a[j]  # меняем элементы пары местами 
# print('Отсортированный список:', a)

'''
Оптимизируйте приведенный код, 
реализующий алгоритм пузырьковой сортировки.
'''
# a = [17, 24, 91, 96, 67, -27, 79, -71, -71, 58, 48, 88, 88, -16, 
# -78, 96, -76, 56, 92, 1, 32, -17, 36, 88, -61, -97, -37, -84, 50, 
# 47, 94, -6, 52, -76, 93, 14, -32, 98, -65, -16, -9, -68, -20, -40, 
# -71, 93, -91, 44, 25, 79, 97, 0, -94, 7, -47, -96, -55, -58, -78, 
# -78, -79, 75, 44, -56, -41, 38, 16, 70, 17, -17, -24, -83, -74, 
# -73, 11, -26, 63, -75, -19, -13, -51, -74, 21, -8, 21, -68, -66, 
# -84, -95, 78, 69, -29, 39, 38, -55, 7, -11, -26, -62, -84]
# n = len(a)
# for i in range(n - 1):
#     flag = True
#     for j in range(n - i - 1):
#         if a[j] > a[j + 1]:
#             a[j], a[j + 1] = a[j + 1], a[j]
#             flag = False
#     if flag:
#         break
# print(a)



'''
    Сортировка выбором
Сортировка выбором улучшает пузырьковую сортировку, совершая всего один обмен за каждый проход по списку. 
Для этого алгоритм ищет максимальный элемент и помещает его на соответствующую позицию. 
Как и для пузырьковой сортировки, после первого прохода самый большой элемент находится на правильном месте. 
После второго прохода на своё место становится следующий максимальный элемент. 
Проходы по списку повторяются n-1 раз, где n – длина списка, поскольку последний из них 
автоматически оказывается на своем месте.
'''

'''
Отсортируйте список по возрастанию, 
реализовав алгоритм сортировки выбором.
'''
# a = [78, -32, 5, 39, 58, -5, -63, 57, 72, 9, 53, -1, 63, -97, 
# -21, -94, -47, 57, -8, 60, -23, -72, -22, -79, 90, 96, -41, -71, 
# -48, 84, 89, -96, 41, -16, 94, -60, -64, -39, 60, -14, -62, -19, 
# -3, 32, 98, 14, 43, 3, -56, 71, -71, -67, 80, 27, 92, 92, -64, 0, 
# -77, 2, -26, 41, 3, -31, 48, 39, 20, -30, 35, 32, -58, 2, 63, 64, 
# 66, 62, 82, -62, 9, -52, 35, -61, 87, 78, 93, -42, 87, -72, -10, 
# -36, 61, -16, 59, 59, 22, -24, -67, 76, -94, 59]
# n = len(a)
# b = []
# while len(a) > 0:
#     b.append(min(a))
#     a.remove(min(a))
# a = b    
# print(a)


'''
Сортировка простыми вставками
Алгоритм сортировки простыми вставками делит список на 2 части — отсортированную и неотсортированную. 
Из неотсортированной части извлекается очередной элемент и вставляется на нужную позицию, 
в результате чего отсортированная часть списка увеличивается, а неотсортированная уменьшается. 
Так происходит, пока не исчерпан набор входных данных  и не отсортированы все элементы.
'''
a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
n = len(a)
for i in range(1, n): 
    elem = a[i]  # первый элемент из неотсортированной части списка
    j = i
    while j >= 1 and a[j - 1] > elem: 
        a[j] = a[j - 1]
        j -= 1
    a[j] = elem
print('Отсортированный список:', a)